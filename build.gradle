plugins {
	id "java"
	id "java-library"
	id "scala"
	id "com.google.protobuf" version "0.9.1"
	id "com.github.alisiikh.scalastyle" version "3.4.1"
	id "com.github.johnrengelman.shadow" version "7.1.2"
	id "com.diffplug.spotless" version "6.4.2"
}

rootProject.group = "blaze-engine"
rootProject.version = "1.0.1"

ext {
	shim = rootProject.properties.getOrDefault("shim", "spark303")
	licenseHeader = "" +
			"/*\n" +
			" * Copyright 2022 The Blaze Authors\n" +
			" *\n" +
			" * Licensed under the Apache License, Version 2.0 (the \"License\");\n" +
			" * you may not use this file except in compliance with the License.\n" +
			" * You may obtain a copy of the License at\n" +
			" *\n" +
			" *     http://www.apache.org/licenses/LICENSE-2.0\n" +
			" *\n" +
			" * Unless required by applicable law or agreed to in writing, software\n" +
			" * distributed under the License is distributed on an \"AS IS\" BASIS,\n" +
			" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" +
			" * See the License for the specific language governing permissions and\n" +
			" * limitations under the License.\n" +
			" */\n\n"
}

logger.warn "compiling with shim=${ext.shim}"

subprojects {
	buildscript {
		apply plugin: "java"
		apply plugin: "java-library"
		apply plugin: "scala"
		apply plugin: "com.diffplug.spotless"
		apply plugin: "com.github.alisiikh.scalastyle"
		apply plugin: "com.github.johnrengelman.shadow"

		group = rootProject.group
		version = rootProject.version

		java.sourceCompatibility = JavaVersion.VERSION_1_8
		java.targetCompatibility = JavaVersion.VERSION_1_8

		compileJava.options.encoding = "UTF-8"
		compileTestJava.options.encoding = "UTF-8"
		javadoc.options.encoding = "UTF-8"
		compileScala.options.encoding = "UTF-8"
		compileTestScala.options.encoding = "UTF-8"

		scalastyle {
			scalaVersion = "2.12"
			scalastyleVersion = "1.5.1"
			config = file("${projectDir}/../scalastyle_config.xml")
			skip = true
			inputEncoding = "UTF-8"
			outputEncoding = "UTF-8"
			failOnWarning = false
			verbose = false
			quiet = false
		}

		spotless {
			format "misc", {
				target "*.gradle", "*.md", ".gitignore"
				trimTrailingWhitespace()
				indentWithSpaces()
				endWithNewline()
			}
			java {
				importOrder("java", "javax", "org.apache", "com.blaze", "", "\\#")
				target "src/main/java/**/*.java"
				removeUnusedImports()
				googleJavaFormat()
				licenseHeader rootProject.ext.licenseHeader
			}
			scala {
				target "src/main/scala/**/*.scala"
				scalafmt("2.6.1").configFile("${projectDir}/../dev/.scalafmt.conf")
				licenseHeader rootProject.ext.licenseHeader, "package "
			}
		}

		sourceSets {
			main {
				scala {
					srcDirs = ["src/main/scala", "src/main/java", "src/generated-sources/main/java"]
				}
				java {
					srcDirs = []
				}
			}
			test {
				scala {
					srcDirs = ["src/test/scala", "src/test/java", "src/generated-sources/test/java"]
				}
				java {
					srcDirs = []
				}
			}
		}

		tasks.withType(Tar) {
			duplicatesStrategy = DuplicatesStrategy.EXCLUDE
		}

		tasks.withType(Zip) {
			duplicatesStrategy = DuplicatesStrategy.EXCLUDE
		}
		tasks.compileScala.dependsOn tasks.scalastyleCheck
		tasks.compileScala.dependsOn tasks.spotlessApply
		project.tasks.compileScala.scalaCompileOptions.additionalParameters = ["-target:jvm-1.8"]
		project.tasks.compileTestScala.scalaCompileOptions.additionalParameters = ["-target:jvm-1.8"]

		if (project.name.startsWith("spark-extension-shims-") && !project.name.endsWith(shim)) {
			project.tasks.all {
				task -> task.enabled = false
			}
		}
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	implementation project(":spark-extension")
	if (shim != "shim-not-configured") {
		implementation project(":spark-extension-shims-${shim}")
	}
}

shadowJar {
	archiveName "${project.name}-${shim}-${project.version}.jar"
	destinationDir file("${projectDir}/target")
	zip64 true
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	// blaze native lib
	from "${projectDir}/lib/"

	relocate("com.google.flatbuffers", "blaze.com.google.flatbuffers")
	relocate("com.google.protobuf", "blaze.com.google.protobuf")
	relocate("org.apache.arrow", "blaze.org.apache.arrow") {
		exclude("org.apache.arrow.c.*")
		exclude("org.apache.arrow.c.jni.*")
	}
	relocate("io.netty", "blaze.io.netty")

	// exclude some stuff that should be always available in spark environment
	exclude("org/apache/commons/codec/**/*")
	exclude("org/apache/commons/compress/**/*")
	exclude("org/slf4j/**/*")
	exclude("com/fasterxml/jackson/**/*")

	outputs.upToDateWhen {
		false
	}
}

task cargo(type: Exec) {
	workingDir "."
	executable "${projectDir}/build-native.sh"
	args += [project.hasProperty("mode") ? getProperty("mode") : "release"]
}

tasks.shadowJar.dependsOn tasks.cargo
tasks.shadowJar.dependsOn project(":spark-extension").tasks.build
if (shim != "shim-not-configured") {
	tasks.shadowJar.dependsOn project(":spark-extension-shims-${shim}").tasks.build
}
tasks.build.dependsOn tasks.shadowJar

clean.doLast {
	file("${projectDir}/lib").deleteDir()
	file("${projectDir}/target").deleteDir()
}
